#include "stdafx.h"
#include "LogoWindow.h"

int CLogoWindow::g_nCosinus[] = {
	0xFF, 0xFE, 0xFE, 0xFD, 0xFC, 0xFB, 0xF9, 0xF7, 
	0xF5, 0xF2, 0xF0, 0xEC, 0xE9, 0xE6, 0xE2, 0xDE, 
	0xD9, 0xD5, 0xD0, 0xCB, 0xC6, 0xC1, 0xBB, 0xB6, 
	0xB0, 0xAA, 0xA4, 0x9E, 0x98, 0x92, 0x8C, 0x86, 
	0x7F, 0x79, 0x73, 0x6D, 0x67, 0x61, 0x5B, 0x55, 
	0x4F, 0x49, 0x44, 0x3E, 0x39, 0x34, 0x2F, 0x2A, 
	0x26, 0x21, 0x1D, 0x19, 0x16, 0x13, 0x0F, 0x0D, 
	0x0A, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x02, 0x03, 0x04, 0x06, 0x08, 
	0x0A, 0x0D, 0x0F, 0x13, 0x16, 0x19, 0x1D, 0x21, 
	0x26, 0x2A, 0x2F, 0x34, 0x39, 0x3E, 0x44, 0x49, 
	0x4F, 0x55, 0x5B, 0x61, 0x67, 0x6D, 0x73, 0x79, 
	0x80, 0x86, 0x8C, 0x92, 0x98, 0x9E, 0xA4, 0xAA, 
	0xB0, 0xB6, 0xBB, 0xC1, 0xC6, 0xCB, 0xD0, 0xD5, 
	0xD9, 0xDE, 0xE2, 0xE6, 0xE9, 0xEC, 0xF0, 0xF2, 
	0xF5, 0xF7, 0xF9, 0xFB, 0xFC, 0xFD, 0xFE, 0xFE, 
	0xFF, 0xFE, 0xFE, 0xFD, 0xFC, 0xFB, 0xF9, 0xF7, 
	0xF5, 0xF2, 0xF0, 0xEC, 0xE9, 0xE6, 0xE2, 0xDE, 
	0xD9, 0xD5, 0xD0, 0xCB, 0xC6, 0xC1, 0xBB, 0xB6, 
	0xB0, 0xAA, 0xA4, 0x9E, 0x98, 0x92, 0x8C, 0x86, 
	0x7F, 0x79, 0x73, 0x6D, 0x67, 0x61, 0x5B, 0x55, 
	0x4F, 0x49, 0x44, 0x3E, 0x39, 0x34, 0x2F, 0x2A, 
	0x26, 0x21, 0x1D, 0x19, 0x16, 0x13, 0x0F, 0x0D, 
	0x0A, 0x08, 0x06, 0x04, 0x03, 0x02, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x02, 0x03, 0x04, 0x06, 0x08, 
	0x0A, 0x0D, 0x0F, 0x13, 0x16, 0x19, 0x1D, 0x21, 
	0x26, 0x2A, 0x2F, 0x34, 0x39, 0x3E, 0x44, 0x49, 
	0x4F, 0x55, 0x5B, 0x61, 0x67, 0x6D, 0x73, 0x79, 
	0x80, 0x86, 0x8C, 0x92, 0x98, 0x9E, 0xA4, 0xAA, 
	0xB0, 0xB6, 0xBB, 0xC1, 0xC6, 0xCB, 0xD0, 0xD5, 
	0xD9, 0xDE, 0xE2, 0xE6, 0xE9, 0xEC, 0xF0, 0xF2, 
	0xF5, 0xF7, 0xF9, 0xFB, 0xFC, 0xFD, 0xFE, 0xFE, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF  };


void CLogoWindow::StepPlasma(LPBYTE pVidMem, int xx, int yy)
{
	static unsigned char p1=0,p2=0,p3=0,p4=0,t1=0,t2=0,t3=0,t4=0;
	int x,y, t,v = 0;
	DWORD c;

	t1=p1;
	t2=p2;
	for (y=0;y<yy;y++)
	{
		t3=p3;
		t4=p4;
		t = g_nCosinus[t1]+g_nCosinus[t2];

		for (x=0;x<xx;x+=4)
		{
			c = (t+g_nCosinus[t3++]+g_nCosinus[t4])>>2;

			t4+=3;

			c |= ((t+g_nCosinus[t3++]+g_nCosinus[t4])<<6) & 0x0000ff00;

			t4+=3;

			c |= ((t+g_nCosinus[t3++]+g_nCosinus[t4])<<14) & 0x00ff0000;

			t4+=3;

			c |= ((t+g_nCosinus[t3++]+g_nCosinus[t4])<<22) & 0xff000000;

			t4+=3;

			*((LPDWORD)(pVidMem + v)) = c;
			v+=4;
		}
		t1+=2;
		t2+=1;
	}

	p1+=1;
	p2-=2;
	p3+=3;
	p4-=4;
}


void CLogoWindow::InitPlasma(COLORREF *pRgb, int &nColor)
{
	int i, c, c1, c2, c3;
	static int nBias = 0;

	//for (i=0;i<256;i++)
	//{
	//	g_nCosinus[i]=(127*(cos(i*PI/64))) + 128;
	//}

	if (nColor > 0)
	{
		nBias += nColor;

		if (nBias >= 20)
		{
			nColor = 0;
			nBias = 20;
		}
	}
	else if (nColor < 0)
	{
		nBias += nColor;

		if (nBias <= 0)
		{
			nColor = 0;
			nBias = 0;
		}
	}


	if (nBias <= 0)
	{
		for (i=0;i<256;i++)
		{
			c1 = g_nCosinus[i];
			c2 = g_nCosinus[(i+32) & 0x0ff];
			c3 = g_nCosinus[(i+64) & 0x0ff];
			c = ((c1 + c2 + c3) >> 2) + 64;

			pRgb[i] = RGB(c, c, c);
		}
	}
	else if (nBias <= 4)
	{
		for (i=0;i<256;i++)
		{
			c1 = g_nCosinus[i];
			c2 = g_nCosinus[(i+32) & 0x0ff];
			c3 = g_nCosinus[(i+64) & 0x0ff];
			c = (((c1 + c2 + c3) >> 2) + 64) * 15;

			pRgb[i] = RGB((c + c1) >> 4, 
				(c + c2) >> 4, 
				(c + c3) >> 4);
		}
	}
	else if (nBias <= 8)
	{
		for (i=0;i<256;i++)
		{
			c1 = g_nCosinus[i];
			c2 = g_nCosinus[(i+32) & 0x0ff];
			c3 = g_nCosinus[(i+64) & 0x0ff];
			c = (((c1 + c2 + c3) >> 2) + 64) * 7;

			pRgb[i] = RGB((c + c1) >> 3, 
				(c + c2) >> 3, 
				(c + c3) >> 3);
		}
	}
	else if (nBias <= 12)
	{
		for (i=0;i<256;i++)
		{
			c1 = g_nCosinus[i];
			c2 = g_nCosinus[(i+32) & 0x0ff];
			c3 = g_nCosinus[(i+64) & 0x0ff];
			c = (((c1 + c2 + c3) >> 2) + 64) * 3;

			pRgb[i] = RGB((c + c1) >> 2, 
				(c + c2) >> 2, 
				(c + c3) >> 2);
		}
	}
	else if (nBias <= 16)
	{
		for (i=0;i<256;i++)
		{
			c1 = g_nCosinus[i];
			c2 = g_nCosinus[(i+32) & 0x0ff];
			c3 = g_nCosinus[(i+64) & 0x0ff];
			c = ((c1 + c2 + c3) >> 2) + 64;

			pRgb[i] = RGB((c + c1) >> 1, 
				(c + c2) >> 1, 
				(c + c3) >> 1);
		}
	}
	else  if (nBias <= 20)
	{
		for (i=0;i<256;i++)
		{
			c1 = g_nCosinus[i];
			c2 = g_nCosinus[(i+32) & 0x0ff];
			c3 = g_nCosinus[(i+64) & 0x0ff];

			pRgb[i] = RGB(c1, c2, c3);
		}
	}

}

LRESULT CLogoWindow::OnCreate(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	CRect r;
	GetClientRect(r);
	IW::Page page = _imageWorking.CreatePage(r.Width(), r.Height(), IW::PixelFormat::PF8);
	COLORREF *pRgb = page.GetPalette();
	InitPlasma(pRgb, m_nColorFade);

	const DWORD dwStorageWidth = page.GetStorageWidth();
	StepPlasma(page.GetBitmap(), dwStorageWidth, page.GetHeight());

	return 0;
}

void CLogoWindow::DoPaint(CDCHandle dc)
{
	CRect rectClient;
	GetClientRect(rectClient);

	IW::Page &page = _imageWorking.GetFirstPage();
	IW::CImageBitmapInfoHeader info(page);

	dc.StretchDIBits(rectClient.left, rectClient.top, rectClient.Width(), rectClient.Height(),
		0, 0, page.GetWidth(), page.GetHeight(), 
		page.GetBitmap(),
		info,
		DIB_RGB_COLORS,
		SRCCOPY);

	CPoint point = rectClient.CenterPoint();
	dc.DrawIconEx(point.x - 8, point.y - 8, IW::Style::Icon::ImageWalker, 16, 16, 0, 0, DI_NORMAL);
}